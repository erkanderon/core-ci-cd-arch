apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: generic-ci-pipeline
  namespace: tekton-executions
spec:
  params:
  - name: repo
    type: string
    description: Repo URL
    default: git@github.com:erkanderon/tekton-go.git
  - name: branch
    type: string
    description: Branch of the repo
    default: master
  - name: workspace
    type: string
    description: Workspace
    default: flower
  - name: project
    type: string
    description: Project
    default: core
  - name: namespace
    type: string
    description: Namespace
    default: authentication
  - name: service
    type: string
    description: Service
    default: tekton-go
  - name: application_type
    type: string
    description: Service
    default: go
  - name: registry
    type: string
    description: Registry Address
    default: registry.minikube.local:5000
  - name: version
    type: string
    description: Image Version
    default: latest
  - name: builder
    type: string
    description: Builder image of the app
  workspaces:
    - name: codebase
  tasks:
    - name: clone
      params:
        - name: repo
          value: $(params.repo)
        - name: branch
          value: $(params.branch)
        - name: workspace
          value: $(params.workspace)
        - name: project
          value: $(params.project)
        - name: service
          value: $(params.service)
        - name: version
          value: $(params.version)
      taskRef:
        name: clone
      workspaces:
        - name: output
          workspace: codebase
    - name: sonarqube-scan
      params:
        - name: SONAR_HOST_URL
          value: http://sonarqube.sonarqube.svc:9000
        - name: SONAR_PROJECT_KEY
          value: $(params.workspace)-$(params.project)-$(params.service)
        - name: SONAR_PROJECT_NAME
          value: $(params.workspace)-$(params.project)-$(params.service)
        - name: SOURCES
          value: $(params.workspace)/$(params.project)/$(params.service)/$(params.version)
        - name: SONAR_LOGIN
          value: admin
        - name: SONAR_PASSWORD
          value: adminadmin
        - name: SONAR_SCANNER_IMAGE
          value: docker.io/sonarsource/sonar-scanner-cli:11
        - name: PROJECT_TYPE
          value: $(params.application_type)
        - name: SONAR_PROJECT_VERSION
          value: $(params.version)
      taskRef:
        name: sonarqube-scan
      when:
        - input: "$(params.application_type)"
          operator: in
          values: ["nodejs", "python", "java", "go"]
      workspaces:
        - name: output
          workspace: codebase
      runAfter:
        - clone
    - name: go-build
      params:
        - name: repo
          value: $(params.repo)
        - name: branch
          value: $(params.branch)
        - name: workspace
          value: $(params.workspace)
        - name: project
          value: $(params.project)
        - name: service
          value: $(params.service)
        - name: builder
          value: $(params.builder)
        - name: version
          value: $(params.version)
      taskRef:
        name: go-build
      when:
        - input: "$(params.application_type)"
          operator: in
          values: ["go"]
      workspaces:
        - name: output
          workspace: codebase
      runAfter:
        - clone
    - name: node-build
      params:
        - name: repo
          value: $(params.repo)
        - name: branch
          value: $(params.branch)
        - name: workspace
          value: $(params.workspace)
        - name: project
          value: $(params.project)
        - name: service
          value: $(params.service)
        - name: builder
          value: $(params.builder)
        - name: version
          value: $(params.version)
      taskRef:
        name: node-build
      when:
        - input: "$(params.application_type)"
          operator: in
          values: ["nodejs"]
      workspaces:
        - name: output
          workspace: codebase
      runAfter:
        - clone
    - name: maven-build
      params:
        - name: repo
          value: $(params.repo)
        - name: branch
          value: $(params.branch)
        - name: workspace
          value: $(params.workspace)
        - name: project
          value: $(params.project)
        - name: service
          value: $(params.service)
        - name: builder
          value: $(params.builder)
        - name: version
          value: $(params.version)
      taskRef:
        name: maven-build
      when:
        - input: "$(params.application_type)"
          operator: in
          values: ["java-maven"]
      workspaces:
        - name: output
          workspace: codebase
      runAfter:
        - clone
    - name: gradle-build
      params:
        - name: repo
          value: $(params.repo)
        - name: branch
          value: $(params.branch)
        - name: workspace
          value: $(params.workspace)
        - name: project
          value: $(params.project)
        - name: service
          value: $(params.service)
        - name: builder
          value: $(params.builder)
        - name: version
          value: $(params.version)
      taskRef:
        name: gradle-build
      when:
        - input: "$(params.application_type)"
          operator: in
          values: ["java-gradle"]
      workspaces:
        - name: output
          workspace: codebase
      runAfter:
        - clone
    - name: dotnet-build
      params:
        - name: repo
          value: $(params.repo)
        - name: branch
          value: $(params.branch)
        - name: workspace
          value: $(params.workspace)
        - name: project
          value: $(params.project)
        - name: service
          value: $(params.service)
        - name: builder
          value: $(params.builder)
        - name: version
          value: $(params.version)
      taskRef:
        name: dotnet-build
      when:
        - input: "$(params.application_type)"
          operator: in
          values: ["dotnet"]
      workspaces:
        - name: output
          workspace: codebase
      runAfter:
        - clone
    - name: docker-build-push
      params:
        - name: image
          value: $(params.registry)/$(params.workspace)/$(params.project)/$(params.service):$(params.version)
        - name: workspace
          value: $(params.workspace)
        - name: project
          value: $(params.project)
        - name: service
          value: $(params.service)
        - name: version
          value: $(params.version)
      taskRef:
        name: docker-build-push
      workspaces:
        - name: output
          workspace: codebase
      runAfter:
        - go-build
  finally:
    - name: clean-workspace
      params:
        - name: workspace
          value: $(params.workspace)
        - name: project
          value: $(params.project)
        - name: service
          value: $(params.service)
        - name: version
          value: $(params.version)
      taskRef: 
        name: clean-workspace
      workspaces:
        - name: output
          workspace: codebase