apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: generic-cd-pipeline
  namespace: tekton-executions
spec:
  params:
  - name: repo
    type: string
    description: Repo URL
    default: git@github.com:erkanderon/tekton-go.git
  - name: environment
    type: string
    description: Environment
    default: test
  - name: branch
    type: string
    description: Branch for clone job pathing
    default: test
  - name: project
    type: string
    description: Project
    default: core
  - name: workspace
    type: string
    description: Workspace
    default: flower
  - name: namespace
    type: string
    description: Namespace
    default: core-test
  - name: service
    type: string
    description: Service
    default: tekton-go
  - name: registry
    type: string
    description: Registry Address
    default: registry.minikube.local:5000
  - name: version
    type: string
    description: Image Version
    default: latest
  workspaces:
    - name: codebase
  tasks:
    - name: clone
      params:
        - name: repo
          value: $(params.repo)
        - name: branch
          value: $(params.branch)
        - name: workspace
          value: $(params.workspace)
        - name: project
          value: $(params.project)
        - name: service
          value: $(params.service)
        - name: version
          value: $(params.version)
      taskRef:
        name: clone
      workspaces:
        - name: output
          workspace: codebase
    - name: prepare-gitops-repo
      params:
        - name: branch
          value: $(params.branch)
        - name: environment
          value: $(params.environment)
        - name: workspace
          value: $(params.workspace)
        - name: project
          value: $(params.project)
        - name: namespace
          value: $(params.namespace)
        - name: service
          value: $(params.service)
        - name: version
          value: $(params.version)
        - name: image
          value: $(params.registry)/$(params.workspace)/$(params.project)/$(params.service):$(params.version)
      taskRef:
        name: prepare-gitops-repo
      workspaces:
        - name: output
          workspace: codebase
      runAfter:
        - clone
    - name: create-argo-project
      params:
        - name: workspace
          value: $(params.workspace)
        - name: project
          value: $(params.project)
        - name: namespace
          value: $(params.namespace)
        - name: service
          value: $(params.service)
        - name: environment
          value: $(params.environment)
        - name: version
          value: $(params.version)
        - name: repo
          value: $(params.repo)
      taskRef:
        name: create-argo-project-api-based
      workspaces:
        - name: output
          workspace: codebase
      runAfter:
        - clone
    - name: commit-and-push
      params:
        - name: workspace
          value: $(params.workspace)
        - name: project
          value: $(params.project)
        - name: service
          value: $(params.service)
        - name: message
          value: Auto Merged by tekton
        - name: version
          value: $(params.version)
      taskRef:
        name: commit-and-push
      workspaces:
        - name: output
          workspace: codebase
      runAfter:
        - prepare-gitops-repo
  finally:
    - name: clean-workspace
      params:
        - name: workspace
          value: $(params.workspace)
        - name: project
          value: $(params.project)
        - name: service
          value: $(params.service)
        - name: version
          value: $(params.version)
      taskRef: 
        name: clean-workspace
      workspaces:
        - name: output
          workspace: codebase
# CLONE argo repo 
# PREPARE ARGO REPO check if the path folder exist change image, if not exist create from template pull than push
# PREPARE ARGO PROJECT based on the environment, go checkout cluster, apply argo project yaml if not exist filled by template
