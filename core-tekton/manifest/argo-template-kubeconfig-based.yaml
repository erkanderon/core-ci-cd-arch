apiVersion: v1
kind: ConfigMap
metadata:
  name: argo-template-kubeconfig-based
  namespace: tekton-executions
data:
  application.yaml: |-
    apiVersion: "argoproj.io/v1alpha1"
    kind: Application
    metadata:
      name: $(argo_app_name)
      namespace: argocd
      finalizers: ["resources-finalizer.argocd.argoproj.io"]
      labels:
        name: $(argo_app_name)
    spec:
      project: "default"
      source:
        repoURL: $(argo_repo)
        targetRevision: "HEAD"
        path: $(app_path)
      destination:
        server: "https://kubernetes.default.svc"
        namespace: $(namespace)
      syncPolicy:
        automated:
          prune: True
        syncOptions:
          - "CreateNamespace=true"
  values.yaml: |-
    argo_app_name:
    argo_repo:
    app_path:
    namespace:
  requirements.txt: |-
    PyYAML
    kubernetes
  create_namespace_and_argo_application.py: |-
    #!/usr/bin/python3
    # -*- coding: utf-8 -*-

    import argparse
    from kubernetes import client, config
    import yaml

    parser = argparse.ArgumentParser(description="Deployment CLI")

    parser.add_argument(
        "--argo_app_name",
        required=True,
        type=str.lower,
        help="Application resource name in argocd"
    )

    parser.add_argument(
        "--namespace",
        required=True,
        type=str.lower,
        help="Namespace that the application is going to work in"
    )

    parser.add_argument(
        "--kubeconfig",
        required=True,
        help="Kubeconfig path"
    )

    parser.add_argument(
        "--template_path",
        required=True,
        help="argo template_path path"
    )

    args = parser.parse_args()

    config.load_kube_config(args.kubeconfig)
    with open(args.template_path, "r") as file:
        template = yaml.safe_load(file)    

    def create_argocd_application_if_not_exists(application_name, template, namespace="argocd"):
        """
        Checks if an Argo CD Application with the given name exists in the specified namespace.

        Args:
            application_name (str): The name of the Argo CD Application to check.
            namespace (str, optional): The namespace where Argo CD is installed. Defaults to "argocd".

        Returns:
            bool: True if the Application exists, False otherwise.
        """

        # Use the custom objects API to interact with Argo CD
        api = client.ApiClient()
        api_instance = client.CustomObjectsApi(api)

        group = "argoproj.io"
        version = "v1alpha1"
        plural = "applications"  # The plural for Applications in the Argo CD API

        try:
            # List Applications in the specified namespace
            applications = api_instance.list_namespaced_custom_object(
                group, version, namespace, plural
            )

            # Check if the desired Application name is in the list
            for app in applications["items"]:
                if app["metadata"]["name"] == application_name:
                    print(f"Argo CD Application '{application_name}' exists in namespace '{namespace}'.")
                    return True
            api_instance.create_namespaced_custom_object(
                group, version, namespace, plural, template
            )
            return False

        except client.exceptions.ApiException as e:
            print(f"Error: An error occurred while checking for Argo CD Application: {e}")
            return False

    def create_namespace_if_not_exists(namespace_name):
        api = client.CoreV1Api()

        try:
            # Check if the namespace exists
            api.read_namespace(name=namespace_name)
            print(f"Namespace '{namespace_name}' already exists.")
        except client.exceptions.ApiException as e:
            if e.status == 404:
                # Create the namespace if it does not exist
                namespace = client.V1Namespace(metadata=client.V1ObjectMeta(name=namespace_name))
                api.create_namespace(body=namespace)
                print(f"Namespace '{namespace_name}' created.")
            else:
                # Raise any other error
                print(f"Error: An error occurred: {e}")
                raise
    create_namespace_if_not_exists(args.namespace)
    create_argocd_application_if_not_exists(args.argo_app_name, template)
