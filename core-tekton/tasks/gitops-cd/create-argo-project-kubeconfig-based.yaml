apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-argo-project-kubeconfig-based
  namespace: tekton-executions
spec:
  params:
  - name: workspace
    type: string
    description: workspace
  - name: project
    type: string
    description: project
  - name: service
    type: string
    description: service
  - name: namespace
    type: string
    description: namespace
  - name: environment
    type: string
    description: environment
    default: test
  - name: repo
    type: string
    description: argo repository remote address
    default: test
  - name: version
    type: string
    description: version
  workspaces:
  - name: output
  steps:
  - name: create-argo-project
    image: python:3.9-alpine
    script: |
      #!/bin/sh
      apk add yq
      mkdir -p /tmp/$(params.workspace)/$(params.project)/$(params.service)/$(params.version)
      cd /tmp/$(params.workspace)/$(params.project)/$(params.service)/$(params.version)
      cp -r /templates/**/..data/*.yaml .

      pip3 install -r /templates/argo-template/requirements.txt || exit 1

      yq eval '.argo_app_name = "$(params.project)-$(params.service)-$(params.environment)"' -i ./values.yaml || exit 1
      yq eval '.argo_repo = "$(params.repo)"' -i ./values.yaml || exit 1
      yq eval '.app_path = "$(params.workspace)/$(params.project)/$(params.service)/$(params.environment)"' -i ./values.yaml || exit 1
      yq eval '.namespace = "$(params.project)-$(params.environment)"' -i ./values.yaml || exit 1

      echo "----------------------------------------"
      cat values.yaml
      echo "----------------------------------------"

      python /templates/parser/parser.py --values_path ./values.yaml --template_path ./application.yaml || exit 1

      echo "----------------------------------------"
      cat ./application.yaml
      echo "----------------------------------------"

      python /templates/argo-template/create_namespace_and_argo_application.py \
        --argo_app_name $(params.project)-$(params.service)-$(params.environment) \
        --namespace $(params.namespace) \
        --kubeconfig /kubeconfig/$(params.environment) \
        --template_path /tmp/$(params.workspace)/$(params.project)/$(params.service)/$(params.version)/application.yaml || exit 1

    volumeMounts:
        - name: argo-template
          mountPath: /templates/argo-template
        - name: parser
          mountPath: /templates/parser
        - name: kubeconfig
          mountPath: /kubeconfig
          readOnly: true
  volumes:
    - name: argo-template
      configMap:
        name: argo-template
    - name: parser
      configMap:
        name: parser
    - name: kubeconfig
      secret:
        secretName: kubeconfig